{"version":3,"sources":["components/Counter/Counter.js","App.js","actions/actions.js","types/actionTypes.js","serviceWorker.js","reducers/rootReducer.js","store.js","index.js"],"names":["Counter","counter","increaseCounter","decreaseCounter","onClick","connect","state","appReducer","dispatch","actions","type","props","className","Boolean","window","location","hostname","match","initialState","combineReducers","action","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","rootReducer","applyMiddleware","logger","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8PAEe,SAASA,EAAT,GAA+D,IAA7CC,EAA4C,EAA5CA,QAASC,EAAmC,EAAnCA,gBAAiBC,EAAkB,EAAlBA,gBACzD,OACE,oCACGF,EACD,4BAAQG,QAASF,GAAjB,KACA,4BAAQE,QAASD,GAAjB,M,WCQN,IAeeE,eAfS,SAACC,GACvB,MAAO,CACLL,QAASK,EAAMC,WAAWN,YAIH,SAAAO,GACzB,MAAO,CACLC,QAAS,CACPP,gBAAiB,kBAAMM,ECtBS,CAACE,KCFd,eFyBnBP,gBAAiB,kBAAMK,ECtBS,CAACE,KCFd,mBF6BVL,EAxBf,SAAaM,GACT,OACE,yBAAKC,UAAU,OACb,kBAACZ,EAAD,CAASC,QAASU,EAAMV,QAASC,gBAAiBS,EAAMF,QAAQP,gBAAiBC,gBAAiBQ,EAAMF,QAAQN,sBGGpGU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,4kBCfN,IAAMC,EAAe,CACnBjB,QAAS,GAgBIkB,cAAgB,CAAEZ,WAbd,WAAmC,IAAlCD,EAAiC,uDAAzBY,EAAcE,EAAW,uCACnD,OAAQA,EAAOV,MACb,IFTqB,YEUnB,OAAO,EAAP,GAAWJ,EAAX,CAAkBL,QAASK,EAAML,QAAU,IAE7C,IFXqB,YEYnB,OAAO,EAAP,GAAWK,EAAX,CAAkBL,QAASK,EAAML,QAAU,IAE7C,QACE,OAAOK,M,yBCXPe,EAAmBP,OAAOQ,sCAAwCC,IASzDC,EAPDC,YACZC,EACAL,EACEM,YAAgBC,IAAQC,OCF5BC,IAASC,OACP,kBAAC,IAAD,CAAUP,MAAOA,GACf,kBAAC,EAAD,OAEFQ,SAASC,eAAe,SHqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.0d68c9d4.chunk.js","sourcesContent":["import React from 'react';\n\nexport default function Counter({counter, increaseCounter, decreaseCounter}) {\n  return(\n    <>\n      {counter}\n      <button onClick={increaseCounter}>+</button>\n      <button onClick={decreaseCounter}>-</button>\n    </>\n  );\n}\n","import React from 'react';\nimport './App.css';\nimport Counter from './components/Counter/Counter';\nimport { connect } from 'react-redux';\nimport { increaseCounter, decreaseCounter } from './actions/actions';\n\nfunction App(props) {\n    return (\n      <div className=\"App\">\n        <Counter counter={props.counter} increaseCounter={props.actions.increaseCounter} decreaseCounter={props.actions.decreaseCounter} />\n      </div>\n    );\n\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    counter: state.appReducer.counter\n  }\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    actions: {\n      increaseCounter: () => dispatch(increaseCounter()),\n      decreaseCounter: () => dispatch(decreaseCounter())\n    }\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { INCREMENT, DECREMENT } from '../types/actionTypes';\n\nexport const increaseCounter = () => ({type: INCREMENT});\nexport const decreaseCounter = () => ({type: DECREMENT});\n","export const INCREMENT = 'INCREMENT';\nexport const DECREMENT = 'DECREMENT';\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { INCREMENT, DECREMENT } from '../types/actionTypes';\nimport { combineReducers } from 'redux';\n\nconst initialState = {\n  counter: 0,\n};\n\nconst appReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case INCREMENT:\n      return {...state, counter: state.counter + 1};\n\n    case DECREMENT:\n      return {...state, counter: state.counter - 1};\n  \n    default:\n      return state\n  }\n} \n\nexport default combineReducers({ appReducer })\n","import { applyMiddleware, createStore, compose } from \"redux\";\nimport rootReducer from \"./reducers/rootReducer\";\nimport logger from 'redux-logger';\nimport thunk from 'redux-thunk';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(\n  rootReducer,\n  composeEnhancers(\n    applyMiddleware(logger, thunk),\n  )\n);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './store.js'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}