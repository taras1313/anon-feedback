{"version":3,"sources":["components/TreadComponent/TreadComponent.module.scss","components/Counter/Counter.js","types/actionTypes.js","components/TreadComponent/TreadComponent.js","App.js","actions/actions.js","serviceWorker.js","reducers/rootReducer.js","store.js","index.js"],"names":["module","exports","Counter","counter","increaseCounter","decreaseCounter","onClick","randomize","Math","floor","random","PREVIEW","FULL","TreadComponent","props","renderTread","answersCount","renderTreadAuthor","renderTreadHeader","className","styles","description","renderTreadMetaInfo","author","nickName","firstLetter","secondLetter","treadAuthor","treadAuthorBox","treadView","cx","heading","hovered","subscribersCount","dislikesCount","likesCount","treadMetaInfo","divider","Date","toISOString","icon","renderPreviewTread","counterWrapper","renderContent","wrapper","this","Component","defaultProps","connect","state","appReducer","dispatch","actions","type","Boolean","window","location","hostname","match","initialState","combineReducers","action","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","rootReducer","applyMiddleware","logger","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c726c67c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"TreadComponent_wrapper__1P_HM\",\"treadAuthor\":\"TreadComponent_treadAuthor__1Io7t\",\"treadAuthorBox\":\"TreadComponent_treadAuthorBox__1f1QY\",\"answersCount\":\"TreadComponent_answersCount__1oZl6\",\"heading\":\"TreadComponent_heading__3lrz6\",\"hovered\":\"TreadComponent_hovered__2kV_d\",\"description\":\"TreadComponent_description__381RC\",\"treadMetaInfo\":\"TreadComponent_treadMetaInfo__yK35j\",\"counterWrapper\":\"TreadComponent_counterWrapper__2teFX\",\"divider\":\"TreadComponent_divider__198Ja\",\"icon\":\"TreadComponent_icon__1uWJh\"};","import React from 'react';\n\nexport default function Counter({counter, increaseCounter, decreaseCounter}) {\n  return(\n    <>\n      {counter}\n      <button onClick={increaseCounter}>+</button>\n      <button onClick={decreaseCounter}>-</button>\n    </>\n  );\n}\n","export const INCREMENT = 'INCREMENT';\nexport const DECREMENT = 'DECREMENT';\n","import React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport QuestionAnswerOutlinedIcon from '@material-ui/icons/QuestionAnswerOutlined';\nimport ThumbDownOutlinedIcon from '@material-ui/icons/ThumbDown';\nimport ThumbUpOutlinedIcon from '@material-ui/icons/ThumbUp';\nimport cx from 'classnames';\n\nimport styles from './TreadComponent.module.scss';\n\nconst randomize = () => Math.floor(Math.random() * 10);\nconst PREVIEW = 'preview';\nconst FULL = 'full';\nconst viewTypes = [PREVIEW, FULL];\n//todo like logic- when to disable, already liked functionality, dislike cancels like etc.\n\nexport class TreadComponent extends Component {\n  constructor(props) {\n    super(props);\n    const { treadView } = props;\n\n    this.renderContent = treadView === FULL ? this.renderTread : this.renderPreviewTread;\n  }\n\n  renderTread = () => {\n    const { answersCount } = this.props;\n\n    return (\n      <Fragment>\n        <div>\n          {this.renderTreadAuthor()}\n          {this.renderTreadHeader()}\n          <div className={styles.description}>\n            I want to loot 1.5k but I dunno where to start and which programming language should i choose.\n            Both swift and go are popular and well paid but first of all I'm interested in learning blyadski facades and observers.\n            Right now i'm shoes seller.\n            Swift is a general-purpose programming language developed by Apple, for an operating system like iOS, macOS, watch OS, and Linux.\n            Swift supports multiple programming paradigms and it is object-oriented, functional and imperative in nature.\n            It is heavily designed to work with Appleâ€™s Cocoa and Cocoa Touch Frameworks.\n            Go is a programming language also known by the name of Golang, created by Google in 2009.\n            Go supports multi-paradigm like procedural, functional and concurrent.\n            Its syntax is traditionally coming from C, but it has done a lot of modification to improve upon features like simplicity and safety.\n            Tirka 23\n          </div>\n          {this.renderTreadMetaInfo()}\n        </div>\n      </Fragment>\n    );\n  };\n  // action\n\n  renderTreadAuthor = () => {\n    const {\n      author: {\n        nickName = 'Ne Tot Pazan'\n      }\n    } = this.props;\n    const [firstLetter, secondLetter] = nickName;\n\n    return (\n      <div className={styles.treadAuthor}>\n        <div className={styles.treadAuthorBox}>\n          {firstLetter + secondLetter}\n        </div>\n        <span>\n         {nickName}\n        </span>\n      </div>\n    );\n  };\n\n  renderTreadHeader = () => {\n    const { treadView } = this.props;\n\n    return (\n      <div\n        className={cx(styles.heading, {\n          [styles.hovered]: treadView === PREVIEW\n        })}\n      >\n        What to learn SWIFT or GO?\n      </div>\n    )\n  };\n\n  renderTreadMetaInfo = () => {\n    const { subscribersCount, dislikesCount, likesCount } = this.props;\n\n    return (\n      <div className={styles.treadMetaInfo}>\n        {subscribersCount} subscribers\n        <span className={styles.divider}>-</span>\n        {new Date().toISOString()}\n        <span className={styles.divider}>-</span>\n        <ThumbUpOutlinedIcon className={styles.icon} /> {likesCount}\n        <span className={styles.divider}>-</span>\n        <ThumbDownOutlinedIcon className={styles.icon} /> {dislikesCount}\n      </div>\n    );\n  };\n\n  renderPreviewTread = () => {\n    const { answersCount } = this.props;\n\n    return (\n      <Fragment>\n        <div>\n          {this.renderTreadAuthor()}\n          {this.renderTreadHeader()}\n          {this.renderTreadMetaInfo()}\n        </div>\n        <div className={styles.answersCount}>\n          <div className={styles.counterWrapper}>\n            <QuestionAnswerOutlinedIcon />\n            {answersCount}\n          </div>\n          <span>answer(s)</span>\n        </div>\n      </Fragment>\n    );\n  };\n\n  render() {\n    return (\n      <div className={styles.wrapper}>\n        {this.renderContent()}\n      </div>\n    );\n  }\n}\n\nTreadComponent.propTypes = {\n  heading: PropTypes.string,\n  answersCount: PropTypes.number,\n  subscribersCount: PropTypes.number,\n  creationDate: PropTypes.object,\n  content: PropTypes.string,\n  likesCount: PropTypes.number,\n  dislikesCount: PropTypes.number,\n  treadView: PropTypes.oneOf(viewTypes),\n  author: PropTypes.object,\n  onLikeClick: PropTypes.func,\n  onDislikeClick: PropTypes.func,\n  onSubscribeClick: PropTypes.func,\n  onEditClick: PropTypes.func\n};\n\nTreadComponent.defaultProps = {\n  treadView: PREVIEW, // edit\n  subscribersCount: randomize(),\n  answersCount: randomize(),\n  dislikesCount: randomize(),\n  likesCount: randomize(),\n  author: {}\n};\n\n\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport Counter from './components/Counter/Counter';\nimport { increaseCounter, decreaseCounter } from './actions/actions';\nimport { TreadComponent } from './components/TreadComponent';\n\nimport './App.scss';\n\nfunction App(props) {\n    return (\n      <div className=\"App\">\n        <TreadComponent treadView=\"full\"/>\n        <hr />\n        <TreadComponent/>\n        <TreadComponent/>\n        <TreadComponent/>\n        <Counter counter={props.counter} increaseCounter={props.actions.increaseCounter} decreaseCounter={props.actions.decreaseCounter} />\n      </div>\n    );\n\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    counter: state.appReducer.counter\n  }\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    actions: {\n      increaseCounter: () => dispatch(increaseCounter()),\n      decreaseCounter: () => dispatch(decreaseCounter())\n    }\n  }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { INCREMENT, DECREMENT } from '../types/actionTypes';\n\nexport const increaseCounter = () => ({type: INCREMENT});\nexport const decreaseCounter = () => ({type: DECREMENT});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { INCREMENT, DECREMENT } from '../types/actionTypes';\nimport { combineReducers } from 'redux';\n\nconst initialState = {\n  counter: 0,\n};\n\nconst appReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case INCREMENT:\n      return {...state, counter: state.counter + 1};\n\n    case DECREMENT:\n      return {...state, counter: state.counter - 1};\n  \n    default:\n      return state\n  }\n} \n\nexport default combineReducers({ appReducer })\n","import { applyMiddleware, createStore, compose } from \"redux\";\nimport rootReducer from \"./reducers/rootReducer\";\nimport logger from 'redux-logger';\nimport thunk from 'redux-thunk';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(\n  rootReducer,\n  composeEnhancers(\n    applyMiddleware(logger, thunk),\n  )\n);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './store.js'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}